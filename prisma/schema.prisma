generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String             @id @default(cuid())
  name           String?
  email          String?            @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  accounts       Account[]
  sessions       Session[]
  subscription   Subscription?
  conversations  Conversation[]
  settings       UserSettings?
  apiLimit       UserApiLimit?
  analytics      Analytics[]
  networkMetrics NetworkMetrics[]
  featureUsage   UserFeatureUsage[]
  customModels   CustomModel[]
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  paypalSubscriptionId String?   @unique
  planId               String?
  status               String // active, canceled, suspended, past_due
  currentPeriodStart   DateTime  @default(now())
  currentPeriodEnd     DateTime?
  canceledAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("light")
  notifications Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String
  preview   String    @default("No messages yet")
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  content        String       @db.Text
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  event     String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NetworkMetrics {
  id         String   @id @default(cuid())
  userId     String
  latency    Float
  bandwidth  Float
  packetLoss Float    @default(0)
  status     String   @default("active")
  metadata   Json?    @default("{}")
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserFeatureUsage {
  id          String   @id @default(cuid())
  userId      String
  featureType String
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureType])
  @@index([userId])
  @@index([featureType])
}

model CustomModel {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  status      String   @default("pending")
  modelId     String?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
