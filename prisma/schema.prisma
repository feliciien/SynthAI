generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String           @id
  conversations Conversation[]
  settings      UserSettings?
  apiLimit      UserApiLimit?
  subscription  UserSubscription?
  analytics     Analytics[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  paypalCurrentPeriodEnd DateTime? @map("paypal_current_period_end")
  paypalPlanId           String?   @map("paypal_plan_id")
  paypalStatus           String?   @map("paypal_status")
  paypalSubscriptionId   String?   @unique @map("paypal_subscription_id")
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String
  title       String
  preview     String    @default("No messages yet")
  featureType String    @default("conversation")
  isShared    Boolean   @default(false)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  role           String
  conversationId String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String   @default("system")
  emailNotifications Boolean  @default(true)
  preferredLanguage  String   @default("en")
  customApiKey       String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  eventData Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, eventType])
  @@index([createdAt])
}
