generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String           @id
  conversations Conversation[]
  settings      UserSettings?
  apiLimit      UserApiLimit?
  subscription  UserSubscription?
  analytics     Analytics[]
  networkMetrics NetworkMetrics[]
  featureUsage  UserFeatureUsage[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  paypalSubscriptionId   String?   @map("paypal_subscription_id")
  paypalCustomerId      String?   @map("paypal_customer_id")
  paypalPlanId          String?   @map("paypal_plan_id")
  paypalStatus          String    @default("INACTIVE") @map("paypal_status")
  paypalCurrentPeriodEnd DateTime? @map("paypal_current_period_end")
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([paypalSubscriptionId])
}

model Conversation {
  id          String    @id @default(cuid())
  userId      String
  title       String
  preview     String    @default("No messages yet")
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  content        String       @db.Text
  role          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  theme           String   @default("light")
  notifications   Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(cuid())
  userId    String
  event     String
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model NetworkMetrics {
  id         String   @id @default(cuid())
  userId     String
  latency    Float
  bandwidth  Float
  packetLoss Float
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserFeatureUsage {
  id          String   @id @default(cuid())
  userId      String
  featureType String
  count       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, featureType])
  @@index([userId])
  @@index([featureType])
}
