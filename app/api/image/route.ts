import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { increaseFeatureUsage, checkFeatureLimit } from "@/lib/api-limit";
import { FEATURE_TYPES } from "@/constants";
import OpenAI from 'openai';
import { checkSubscription } from "@/lib/subscription";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const stylePrompts = {
  "realistic": "ultra realistic, photorealistic, highly detailed, 8k resolution, professional photography",
  "artistic": "artistic style, creative interpretation, vibrant colors, expressive brushstrokes",
  "anime": "anime style, manga-inspired, cel shaded, vibrant colors",
  "3d": "3D rendered, volumetric lighting, ray tracing, octane render",
  "pixel": "pixel art style, retro gaming aesthetic, 16-bit graphics",
  "cinematic": "cinematic style, dramatic lighting and composition, movie-like quality"
};

const processPrompt = (prompt: string, style: string = "realistic") => {
  const stylePrompt = stylePrompts[style as keyof typeof stylePrompts] || stylePrompts.realistic;
  return `${prompt}. ${stylePrompt}`;
};

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions);
    const userId = session?.user?.id;

    if (!userId) {
      return new NextResponse("Unauthorized", { status: 401 });
    }

    const body = await req.json();
    const { prompt, amount = 1, resolution = "1024x1024", style = "realistic" } = body;

    if (!prompt) {
      return new NextResponse("Prompt is required", { status: 400 });
    }

    // Check if OpenAI API key is configured
    if (!process.env.OPENAI_API_KEY) {
      console.error("OpenAI API key not configured");
      return new NextResponse("Image generation service not configured", { status: 500 });
    }

    const isPro = await checkSubscription(userId);
    const canGenerate = await checkFeatureLimit(userId, FEATURE_TYPES.IMAGE_GENERATION);
    
    if (!isPro && !canGenerate) {
      return new NextResponse("Free trial has expired. Please upgrade to pro.", { status: 403 });
    }

    console.log("Generating image with prompt:", prompt);
    console.log("Style:", style);
    console.log("Resolution:", resolution);
    console.log("Amount:", amount);

    const enhancedPrompt = processPrompt(prompt, style);
    console.log("Enhanced prompt:", enhancedPrompt);

    const response = await openai.images.generate({
      prompt: enhancedPrompt,
      n: parseInt(amount, 10),
      size: resolution as "1024x1024" | "512x512" | "256x256",
      quality: "standard",
      model: "dall-e-2",
    });

    if (!response.data || response.data.length === 0) {
      console.error("No images generated by OpenAI");
      return new NextResponse("Failed to generate images", { status: 500 });
    }

    console.log("Generated images:", response.data);

    if (!isPro) {
      await increaseFeatureUsage(userId, FEATURE_TYPES.IMAGE_GENERATION);
    }

    return NextResponse.json(response.data);
  } catch (error: any) {
    console.error("[IMAGE_ERROR]", error);
    
    // Handle OpenAI API errors
    if (error?.response?.data?.error) {
      const openAIError = error.response.data.error;
      console.error("OpenAI API error:", openAIError);
      return new NextResponse(openAIError.message || "Image generation failed", { 
        status: error.response.status || 500 
      });
    }
    
    // Handle other errors
    if (error instanceof Error) {
      return new NextResponse(error.message, { status: 500 });
    }
    
    return new NextResponse("Internal Error", { status: 500 });
  }
}
